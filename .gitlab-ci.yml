stages:
  - pre-check
  - build
  - test

before_script:
  - if [ -d $CARGO_TARGET_DIR ]; then find $CARGO_TARGET_DIR | wc --lines; du -sh $CARGO_TARGET_DIR; fi
  - if [ -d $CARGO_HOME ]; then find $CARGO_HOME | wc --lines; du -sh $CARGO_HOME; fi
  - rustc --version
  - cargo --version
  - clang --version

after_script:
  - if [ -d $CARGO_TARGET_DIR ]; then find $CARGO_TARGET_DIR -type f -atime +7 -delete; fi
  - if [ -d $CARGO_TARGET_DIR ]; then du -sh $CARGO_TARGET_DIR; fi
  - if [ -d $CARGO_HOME ]; then du -sh $CARGO_HOME; fi

build-bookworm:
  tags:
    - linux
  stage: build
  image: registry.gitlab.com/sequoia-pgp/build-docker-image/bookworm-prebuild:latest
  needs:
    - codespell
  script:
    - cargo run --manifest-path openpgp/Cargo.toml --no-default-features --features crypto-nettle,compression --example supported-algorithms
    - $MAKE_TOP
    - if ! git diff --quiet Cargo.lock ; then echo "Cargo.lock changed.  Please add the change to the corresponding commit." ; git diff ; false ; fi
    - if ! git diff --quiet sq ; then echo "Please commit the changes to sq/src/sq-usage.rs." ; false ; fi
    - if ! git diff --quiet ; then echo "The build changed the source.  Please investigate." ; git diff ; fi
  variables:
    CARGO_TARGET_DIR: /target
    CARGO_HOME: /cargo
    RUSTFLAGS: -D warnings -A unused-parens
  after_script: []

build-bookworm:arm64:
  tags:
    - docker-arm64
  stage: build
  image: registry.gitlab.com/sequoia-pgp/build-docker-image/bookworm-prebuild-arm64:latest
  needs:
    - codespell
  when: manual
  only:
    variables:
      # Forks of this project most likely do not have an arm64 runner
      - $CI_PROJECT_NAMESPACE == "sequoia-pgp"
  script:
    - $MAKE_TOP
    - if ! git diff --quiet Cargo.lock ; then echo "Cargo.lock changed.  Please add the change to the corresponding commit." ; false ; fi
    - if ! git diff --quiet sq ; then echo "Please commit the changes to sq/src/sq-usage.rs." ; false ; fi
    - if ! git diff --quiet ; then echo "The build changed the source.  Please investigate." ; git diff ; fi
  variables:
    CARGO_TARGET_DIR: /target
    CARGO_HOME: /cargo
    RUSTFLAGS: -D warnings -A unused-parens
  after_script: []

bookworm:
  tags:
    - linux
  stage: build
  image: registry.gitlab.com/sequoia-pgp/build-docker-image/bookworm-prebuild:latest
  needs:
    - codespell
  script:
    - SEQUOIA_CTEST_VALGRIND=/usr/bin/valgrind $MAKE_TOP test
  variables:
    CARGO_TARGET_DIR: /target
    CARGO_HOME: /cargo
    RUSTFLAGS: -D warnings -A unused-parens
  after_script: []

bookworm-crypto-rust:
  tags:
    - linux
  stage: build
  image: registry.gitlab.com/sequoia-pgp/build-docker-image/bookworm-prebuild:latest
  dependencies:
    - codespell
  script:
    - cargo run --manifest-path openpgp/Cargo.toml --no-default-features --features crypto-rust,compression,allow-experimental-crypto,allow-variable-time-crypto --example supported-algorithms
    - cargo test --release --manifest-path openpgp/Cargo.toml --no-default-features --features crypto-rust,compression,allow-experimental-crypto,allow-variable-time-crypto
  variables:
    CARGO_TARGET_DIR: /target
    CARGO_HOME: /cargo
    RUSTFLAGS: -D warnings -A unused-parens
  after_script: []

bookworm:arm64:
  tags:
    - docker-arm64
  # This job takes ~50 minutes to run, let's only execute it manually or for
  # scheduled builds, otherwise this will stall MRs.
  only:
    refs:
      - /arm64/i # refs containing 'arm64' keyword
      - tags
      - web
      - schedules
    variables:
      # Forks of this project most likely do not have an arm64 runner
      - $CI_PROJECT_NAMESPACE == "sequoia-pgp"
  when: manual
  stage: build
  image: registry.gitlab.com/sequoia-pgp/build-docker-image/bookworm-prebuild-arm64:latest
  needs:
    - codespell
  script:
    # valgrind reports a false positive, see !1035. Run the tests without it for now.
    - $MAKE_TOP test
  variables:
    CARGO_TARGET_DIR: /target
    CARGO_HOME: /cargo
    RUSTFLAGS: -D warnings -A unused-parens
  after_script: []

benchmarks:
  stage: test
  image: registry.gitlab.com/sequoia-pgp/build-docker-image/bookworm:latest
  needs: ["rust-stable"]
  only:
    refs:
      - /bench/i # refs containing 'bench' keyword
      - tags
      - web
      - schedules
  before_script:
    - cargo install critcmp
  script:
    - cargo bench -- --color always --save-baseline $CI_COMMIT_SHA
  after_script:
    - MAIN_SHA=$(git merge-base $CI_COMMIT_SHA origin/main)
    - echo CI_COMMIT_SHA=$CI_COMMIT_SHA > benchmark.txt
    - echo CI_COMMIT_BEFORE_SHA=$CI_COMMIT_BEFORE_SHA >> benchmark.txt
    - echo MAIN_SHA=$MAIN_SHA >> benchmark.txt
    - $CARGO_HOME/bin/critcmp --baselines
    - $CARGO_HOME/bin/critcmp $CI_COMMIT_SHA $CI_COMMIT_BEFORE_SHA $MAIN_SHA | tee -a benchmark.txt
  artifacts:
    expose_as: 'benchmark results'
    paths: ['benchmark.txt']
  variables:
    CARGO_TARGET_DIR: $CI_PROJECT_DIR/../target.benchmarks
    RUSTFLAGS: -D warnings -A unused-parens

all_commits:
  # Test each commit up to main, to facilitate bisecting.
  stage: test
  image: registry.gitlab.com/sequoia-pgp/build-docker-image/rust-stable-prebuild:latest
  needs: ["rust-stable"]
  except:
    # Do not run for pushes to the pep-engine branch.
    - /^pep-engine$/
  script:
    - .ci/all_commits.sh
  variables:
    CARGO_TARGET_DIR: /target
    CARGO_HOME: /cargo
    RUSTFLAGS: -D warnings -A unused-parens
    GIT_STRATEGY: clone

all_commits:arm64:
  # Test each commit up to main, to facilitate bisecting.
  tags:
    - docker-arm64
  stage: test
  image: registry.gitlab.com/sequoia-pgp/build-docker-image/rust-stable-prebuild-arm64:latest
  needs: ["rust-stable:arm64"]
  only:
    refs:
      - /arm64/i # refs containing 'arm64' keyword
      - tags
      - web
      - schedules
    variables:
      # Forks of this project most likely do not have an arm64 runner
      - $CI_PROJECT_NAMESPACE == "sequoia-pgp"
  when: manual
  except:
    # Do not run for pushes to the pep-engine branch.
    - /^pep-engine$/
  script:
    - .ci/all_commits.sh
  variables:
    CARGO_TARGET_DIR: /target
    CARGO_HOME: /cargo
    RUSTFLAGS: -D warnings -A unused-parens
    GIT_STRATEGY: clone

codespell:
  tags:
    - linux
  stage: pre-check
  image: registry.gitlab.com/sequoia-pgp/build-docker-image/bookworm:latest

  before_script:
    - codespell --version
  script:
    - $MAKE_TOP codespell CODESPELL_FLAGS=--summary
  after_script: []

doc:
  tags:
    - linux
  stage: build
  image: registry.gitlab.com/sequoia-pgp/build-docker-image/rust-stable-prebuild:latest
  before_script:
    - if [ -d $CARGO_TARGET_DIR ]; then find $CARGO_TARGET_DIR | wc --lines; du -sh $CARGO_TARGET_DIR; fi
    - if [ -d $CARGO_HOME ]; then find $CARGO_HOME | wc --lines; du -sh $CARGO_HOME; fi
    - rustup override set stable
    - rustc --version
    - cargo --version
    - clang --version
  script:
    - cargo doc --document-private-items --no-deps
  variables:
    CARGO_TARGET_DIR: /target
    CARGO_HOME: /cargo
    RUSTFLAGS: -D warnings -A unused-parens
  after_script: []

rust-stable:
  tags:
    - linux
  stage: build
  image: registry.gitlab.com/sequoia-pgp/build-docker-image/rust-stable-prebuild:latest
  before_script:
    - if [ -d $CARGO_TARGET_DIR ]; then find $CARGO_TARGET_DIR | wc --lines; du -sh $CARGO_TARGET_DIR; fi
    - if [ -d $CARGO_HOME ]; then find $CARGO_HOME | wc --lines; du -sh $CARGO_HOME; fi
    - rustup override set stable
    - rustc --version
    - cargo --version
    - clang --version
  script:
    - CARGO_PACKAGES="-p buffered-reader -p sequoia-openpgp" $MAKE_TOP test
  variables:
    CARGO_TARGET_DIR: /target
    CARGO_HOME: /cargo
    RUSTFLAGS: -D warnings -A unused-parens

clippy:
  tags:
    - linux
  stage: build
  image: registry.gitlab.com/sequoia-pgp/build-docker-image/rust-stable-prebuild:latest
  before_script:
    - if [ -d $CARGO_TARGET_DIR ]; then find $CARGO_TARGET_DIR | wc --lines; du -sh $CARGO_TARGET_DIR; fi
    - if [ -d $CARGO_HOME ]; then find $CARGO_HOME | wc --lines; du -sh $CARGO_HOME; fi
    - apt-get -y install libssl-dev capnproto libsqlite3-dev
    - rustup override unset
    - rustup component add clippy
    - cargo clippy --version
    - rustc --version
    - cargo --version
    - clang --version
  script:
    - cargo clippy
  variables:
    CARGO_TARGET_DIR: /target
    CARGO_HOME: /cargo
    RUSTFLAGS: -D warnings -A unused-parens

rust-stable:arm64:
  tags:
    - docker-arm64
  stage: build
  image: registry.gitlab.com/sequoia-pgp/build-docker-image/rust-stable-prebuild-arm64:latest
  only:
    variables:
      # Forks of this project most likely do not have an arm64 runner
      - $CI_PROJECT_NAMESPACE == "sequoia-pgp"
  when: manual
  before_script:
    - if [ -d $CARGO_TARGET_DIR ]; then find $CARGO_TARGET_DIR | wc --lines; du -sh $CARGO_TARGET_DIR; fi
    - if [ -d $CARGO_HOME ]; then find $CARGO_HOME | wc --lines; du -sh $CARGO_HOME; fi
    - rustup override set stable
    - rustc --version
    - cargo --version
    - clang --version
  script:
    - CARGO_PACKAGES="-p buffered-reader -p sequoia-openpgp" $MAKE_TOP test
  variables:
    CARGO_TARGET_DIR: /target
    CARGO_HOME: /cargo
    RUSTFLAGS: -D warnings -A unused-parens

windows-gnu:
  tags:
    - win
    - win2019
  stage: build
  image: registry.gitlab.com/sequoia-pgp/build-docker-image/windows-gnu
  # This job takes ~20 minutes to run, let's only execute it manually or for
  # scheduled builds, otherwise this will stall MRs often not related to Windows
  only:
    refs:
      - /windows/i # refs containing 'windows' keyword
      - tags
      - web
      - schedules
    variables:
      # Forks of this project most likely use gitlab's shared windows runners, which
      # do not use the docker executor, so disable the windows jobs for forks.
      - $CI_PROJECT_NAMESPACE == "sequoia-pgp"
  before_script:
    - clang -v
    - rustc --version --verbose
    - cargo --version
  script:
    - cargo test --workspace
    # https://github.com/rust-lang/cargo/issues/5015
    - cargo test --manifest-path openpgp/Cargo.toml --no-default-features --features crypto-cng,compression
  after_script: []
  variables:
    CFLAGS: "" # Silence some C warnings when compiling under Windows

windows-msvc:
  tags:
    - win
    - win2019
  stage: build
  image: registry.gitlab.com/sequoia-pgp/build-docker-image/windows-msvc
  only:
    variables:
      # Forks of this project most likely use gitlab's shared windows runners, which
      # do not use the docker executor, so disable the windows jobs for forks.
      - $CI_PROJECT_NAMESPACE == "sequoia-pgp"
  before_script:
    - rustc --version --verbose
    - cargo --version
  script:
    # https://github.com/rust-lang/cargo/issues/5015
    - cargo run --manifest-path openpgp/Cargo.toml --no-default-features --features crypto-cng,compression --example supported-algorithms
    - cargo test --manifest-path openpgp/Cargo.toml --no-default-features --features crypto-cng,compression
  after_script: []
  variables:
    CFLAGS: "" # Silence some C warnings when compiling with MSVC

windows-msvc-32:
  tags:
    - win
    - win2019
  stage: build
  image:
    name: registry.gitlab.com/sequoia-pgp/build-docker-image/windows-msvc
    # Set up a cross compilation environment for building x86 binaries on amd64, line copied from Dockerfile.windows.msvc
    # see https://renenyffenegger.ch/notes/Windows/dirs/Program-Files-x86/Microsoft-Visual-Studio/version/edition/Common7/Tools/VsDevCmd_bat
    #
    # Alternatively: ["C:\\BuildTools\\VC\\Auxiliary\\Build\\vcvarsamd64_x86.bat", "&&", "type", "README", "&&", "powershell.exe", "-NoLogo", "-ExecutionPolicy", "Bypass"]
    # see https://docs.microsoft.com/en-us/cpp/build/building-on-the-command-line?view=msvc-160
    entrypoint: ["C:\\BuildTools\\Common7\\Tools\\VsDevCmd.bat", "-arch=x86", "-host_arch=amd64", "&&", "type", "README", "&&", "powershell.exe", "-NoLogo", "-ExecutionPolicy", "Bypass"]
  only:
    variables:
      # Forks of this project most likely use gitlab's shared windows runners, which
      # do not use the docker executor, so disable the windows jobs for forks.
      - $CI_PROJECT_NAMESPACE == "sequoia-pgp"
  before_script:
    - rm rust-toolchain
    - rustup default 1.56.0-x86_64-pc-windows-msvc
    - rustup target add i686-pc-windows-msvc
    - rustup show
    - rustc --version --verbose
    - cargo --version
  script:
    # https://github.com/rust-lang/cargo/issues/5015
    - cargo test --manifest-path openpgp/Cargo.toml --no-default-features --features crypto-cng,compression --target i686-pc-windows-msvc
  after_script: []
  variables:
    CFLAGS: "" # Silence some C warnings when compiling with MSVC

variables:
  DEBIAN_FRONTEND: noninteractive
  CARGO_HOME: $CI_PROJECT_DIR/../cargo
  CARGO_FLAGS: --color always
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: full
  RUSTFLAGS: -D warnings
  CFLAGS: -Werror
  MAKE_TOP: make --file=.Makefile
  QUICKCHECK_GENERATOR_SIZE: 500 # https://github.com/BurntSushi/quickcheck/pull/240
